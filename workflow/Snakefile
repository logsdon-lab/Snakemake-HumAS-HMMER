import os


# This is a port of the following:
# * https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/main/hmmer-run.sh
# * https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/main/hmmer-run_SF.sh

if config.get("input_dir") and "fnames" not in config:
    NAME_PATTERN = os.path.join(config["input_dir"], "{fname}.fa")
    try:
        NAMES = glob_wildcards(NAME_PATTERN).fname
    except AttributeError:
        raise ValueError("Input files must have name wildcard.")
elif config.get("fnames"):
    NAMES = config["fnames"]


MODE = config.get("mode", "hor")
DEF_MEM = config.get("mem", 4)
LOGS_DIR = config.get("logs_dir", "logs/humas_hmmer")
BMKS_DIR = config.get("benchmarks_dir", "benchmarks/humas_hmmer")


# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L42
rule humas_hmmer_analysis:
    input:
        fa=os.path.join(config["input_dir"], "{fname}.fa"),
        hmm=config["hmm_profile"],
    output:
        # https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L49
        # Ugh. f-string / numbers will screw up regex for wildcard parsing.
        temp(
            os.path.join(
                config["output_dir"],
                "nhmmer-"
                + os.path.splitext(os.path.basename(config["hmm_profile"]))[0]
                + "-vs-{fname}-tbl.out",
            )
        ),
    threads: config["threads"]
    params:
        # https://manpages.ubuntu.com/manpages/focal/man1/nhmmer.1.html
        no_line_limit="--notextw",
        no_alignment="--noali",
        toss_human_readable_output="-o /dev/null",
    resources:
        mem=DEF_MEM,
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "humas_hmmer_analysis_{fname}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "humas_hmmer_analysis_{fname}.tsv")
    shell:
        """
        nhmmer \
        --cpu {threads} \
        {params.no_line_limit} \
        {params.no_alignment} \
        --tblout {output} \
        {params.toss_human_readable_output} \
        {input.hmm} {input.fa} &> {log}
        """


# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L46
rule reformat_hmm_tbl_to_bed_w_thr:
    input:
        script=workflow.source_path("scripts/reformat_hmm_tbl_to_bed_w_thr.awk"),
        hmm_tbl=rules.humas_hmmer_analysis.output,
    output:
        regions=temp(
            os.path.join(
                config["output_dir"],
                os.path.splitext(os.path.basename(config["hmm_profile"]))[0]
                + "-vs-{fname}-tbl.bed",
            )
        ),
    params:
        threshold_score=config.get("thr_ident", 0.7),
    resources:
        mem=DEF_MEM,
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "reformat_hmm_tbl_to_bed_w_thr_{fname}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "reformat_hmm_tbl_to_bed_w_thr_{fname}.tsv")
    shell:
        """
        awk -f {input.script} -v THR_SCORE="{params.threshold_score}" {input.hmm_tbl} > {output} 2> {log}
        """


# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L53C4-L53C73
rule sort_hmm_res_by_name_coord:
    input:
        rules.reformat_hmm_tbl_to_bed_w_thr.output,
    output:
        temp(os.path.join(config["output_dir"], "_nhmmer-t0-{fname}.bed")),
    resources:
        mem=DEF_MEM,
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "sort_hmm_res_by_name_coord_{fname}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "sort_hmm_res_by_name_coord_{fname}.tsv")
    shell:
        """
        sort -k 1.4,1 -k 2,2n {input} > {output} 2> {log}
        """


# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L56
rule filter_hmm_res_by_score:
    input:
        rules.sort_hmm_res_by_name_coord.output,
    output:
        temp(os.path.join(config["output_dir"], "_nhmmer-t1-{fname}.bed")),
    # https://bedops.readthedocs.io/en/latest/content/reference/statistics/bedmap.html#usage
    params:
        # Operation
        op_opt="--max-element",
        # Overlap
        overlap_opt="--fraction-either 0.1",
    resources:
        mem=DEF_MEM,
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "filter_hmm_res_by_score_{fname}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "filter_hmm_res_by_score_{fname}.tsv")
    shell:
        """
        bedmap {params.op_opt} {params.overlap_opt} \
        {input} > {output} 2> {log}
        """


# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L60
# FEDOR: don't skip SF monomers
rule filter_hmm_res_uniq_element:
    input:
        rules.filter_hmm_res_by_score.output,
    output:
        # Original workflow overwrites sort_hmm_tbl_bed_by_name_coord output.
        # I give unique fname and marked as temp.
        temp(os.path.join(config["output_dir"], "_nhmmer-t3-{fname}.bed")),
    resources:
        mem=DEF_MEM,
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "filter_hmm_res_uniq_element_{fname}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "filter_hmm_res_uniq_element_{fname}.tsv")
    shell:
        """
        awk '{{ if (!($0 in a)) {{ a[$0]; print }} }}' {input} > {output} 2> {log}
        """


# Based on mode, change output file and commands.
# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L62
# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run_SF.sh#L62
# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L66
# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run_SF.sh#L66
rule filter_hmm_res_overlaps:
    input:
        script=workflow.source_path("scripts/filter_hmm_res_overlaps.py"),
        regions=rules.filter_hmm_res_uniq_element.output,
    output:
        os.path.join(config["output_dir"], "AS-{mode}-vs-{fname}.bed"),
    log:
        os.path.join(LOGS_DIR, "filter_hmm_res_overlaps_{fname}_{mode}.log"),
    conda:
        "envs/env.yaml"
    shell:
        """
        python {input.script} {input.regions} {output}
        """

cmds = {
    "hor": "'{{ if (length($4)==2) {{next}} print}}'",
    "sf": """-F $'\\t' 'BEGIN {{OFS = FS}} {{if ($6=="+") {{$9="0,0,255"}}; if ($6=="-") {{$9="255,0,0"}} print $0}}'"""
}
rule filter_final_hmm_res:
    input:
        rules.filter_hmm_res_overlaps.output,
    output:
        os.path.join(config["output_dir"], "AS-{mode}-vs-{fname}_final.bed"),
    params:
        cmd=lambda wc: cmds[wc.mode],
    resources:
        mem=DEF_MEM,
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "filter_final_hmm_res_{mode}_{fname}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "filter_final_hmm_res_{mode}_{fname}.tsv")
    shell:
        """
        awk {params.cmd} {input} > {output} 2> {log}
        """


rule generate_stv:
    input:
        script=workflow.source_path("scripts/stv_multiarray.py"),
        mon_bed=expand(rules.filter_final_hmm_res.output, mode="hor", fname="{fname}"),
    output:
        os.path.join(config["output_dir"], "{fname}", "stv_row.bed"),
    conda:
        "envs/env.yaml"
    log:
        os.path.join(LOGS_DIR, "generate_stv_{fname}.log"),
    shell:
        """
        python {input.script} -i {input.mon_bed} > {output}
        """


# https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L31
# # https://github.com/fedorrik/HumAS-HMMER_for_AnVIL/blob/dc5e958dfc3820fb8cc21a6ccc5cd8e5d6ef1052/hmmer-run.sh#L36
rule humas_hmmer_all:
    input:
        expand(rules.filter_hmm_res_overlaps.output, mode=MODE, fname=NAMES),
        expand(rules.filter_final_hmm_res.output, mode=MODE, fname=NAMES),
        expand(rules.generate_stv.output, fname=NAMES) if MODE == "hor" else [],
    default_target: True
